# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Mutation {
  signUpBarber(input: NewBarber!): Response
  login(input: UserLogin!): Response
  refreshToken(input: RefreshTokenInput!): Response @checkAuth
}

type Query{
  getAllBarbers: [Barber!]! @checkAuth
  getBarberByID(id: ID!): Barber! @checkAuth
  # Add @checkAuth once I figure out how to pass http headers in Apollo!
  getAppointmentsByUsername(username: String!): [BarberAppointment]!
  getAppointmentByDateRange(input: DateRange!): [BarberAppointment]!
}

directive @checkAuth on FIELD_DEFINITION

type Response{
  response:     String!
  error:        String!
}

type Barber{
  barberID:     ID!
  shopID:       Int!
  userName:     String!
  password:     String!
  firstName:    String!
  lastName:     String!
  PhoneNumber:  String!
  gender:       String
  dob:          String!
  hireDate:     String!
  dismissDate:  String
  seatNum:      Int!
}

# Maybe flesh out Shop, Appointment, Service, and MinClient?
# Add more details/fields?
type BarberAppointment{
  barber: Barber!
  shop: Shop!
  appointment: Appointment!
  client: MinClient!
  service: Service!
}

type Shop{
  shopName: String!
  streetAddr: String!
}

# Look into adding custom Time Scalar Type!
type Appointment{
  apptDate: String!
  startTime: String!
  endTime: String!
  paymentType: String!
  clientCancelled: Boolean!
  barberCancelled: Boolean!
}

type MinClient{
  firstName: String!
  lastName: String!
}

type Service{
  serviceName: String!
  serviceDescription: String!
  price: Float!
  duration: Int!
}

# input types are like passing in whole objects. Used in mutations and stuff.
input NewBarber{
  shopID:       Int!
  userName:     String!
  password:     String!
  firstName:    String!
  lastName:     String!
  PhoneNumber:  String!
  gender:       String
  dob:          String!
  hireDate:     String!
  dismissDate:  String
  seatNum:      Int!
}

input UserLogin {
  username: String!
  password: String!
}

input RefreshTokenInput {
  token: String!
}

input DateRange{
  startDate: String!
  endDate: String!
}